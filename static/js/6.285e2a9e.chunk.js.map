{"version":3,"sources":["formatters.js","AddSymbolForm.js","PortfolioActions.js","PortfolioNav.js","PortfolioContainer.js","Performance.js"],"names":["bigNumberFormatter","window","Intl","NumberFormat","undefined","maximumFractionDigits","POWER_SUFFIXES","abbreviatedNumberFormatter","format","num","fixed","b","toPrecision","split","k","length","Math","floor","min","parseInt","slice","c","abs","toFixed","pow","currencyFormatter","minimumFractionDigits","numberFormatter","percentFormatter","style","AddSymbolForm","props","React","showTransactionData","setShowTransactionData","formEl","className","action","method","onSubmit","event","preventDefault","formData","formSerialize","currentTarget","hash","onAddSymbol","current","reset","innerRef","for","autoComplete","bsSize","id","name","required","color","onClick","size","type","isOpen","disabled","step","marginBottom","isLoading","PortfolioActions","accept","hidden","onChange","files","onImportPortfolio","value","onDeletePortfolio","onDownloadPortfolio","PortfolioNav","role","exact","to","PortfolioContainer","handleAddSymbol","data","transaction","cashValue","commission","parseFloat","date","notes","price","shares","symbol","toUpperCase","dispatch","addTransaction","fetchAllQuotes","handleDeletePortfolio","confirm","deletePortfolio","handleDownloadPortfolio","downloadPortfolio","handleImportPortfolio","file","importTransactionsFile","this","deleteDisabled","onDelete","outline","children","md","connect","state","isFetchingCount","SelectReactTable","selectTableHOC","ReactTable","classes","cell","cx","TABLE_COLUMNS","accessor","Cell","Footer","Header","headerClassName","original","change","changePercent","reduce","total","costBasis","marketValue","totalCostBasis","totalMarketValue","totalGainPercent","totalDaysGain","daysGain","Performance","handleDeleteSelectedSymbols","deleteSymbols","Array","from","selectedSymbols","handlePageSizeChange","nextPageSize","changePageSize","handleToggleAllSymbols","isSelected","isAllSymbolsSelected","setState","Set","symbols","handleToggleSymbolSelected","isSymbolSelected","delete","add","forceUpdate","has","nextProps","prevState","hasChanges","nextSymbols","nextSelectedSymbols","tableData","map","quote","quotes","transactions","filter","totalShares","forEach","latestPrice","gain","gainPercent","showReturns","companyName","columns","defaultSorted","desc","getPaginationProps","NextComponent","PreviousComponent","showPageJump","keyField","noDataText","onPageSizeChange","pageSize","appSettings","selectAll","selectType","toggleAll","toggleSelection"],"mappings":"oGAEA,4IAAMA,EAAqB,IAAIC,OAAOC,KAAKC,kBAAaC,EAAW,CAAEC,sBAAuB,IACtFC,EAAiB,CAAC,GAAI,IAAK,IAAK,IAAK,KAC9BC,EAA6B,CACxCC,OAAOC,EAAaC,GAClB,GAAY,OAARD,GAAwB,IAARA,EAAW,MAAO,IAEtCC,GAASA,GAASA,EAAQ,EAAI,EAAIA,EAClC,IAAMC,EAAIF,EAAIG,YAAY,GAAGC,MAAM,KAC7BC,EAAiB,IAAbH,EAAEI,OAAe,EAAIC,KAAKC,MAAMD,KAAKE,IAAIC,SAASR,EAAE,GAAGS,MAAM,GAAI,IAAK,IAAM,GAEhFC,GADIP,EAAI,EAAIA,EAAIE,KAAKM,IAAIR,IACjB,EAAIL,EAAIc,QAAQ,EAAIb,IAAUD,EAAMO,KAAKQ,IAAI,GAAQ,EAAJV,IAAQS,QAAQ,EAAIb,GACnF,MAAM,GAAN,OAAUV,EAAmBQ,OAAOa,IAApC,OAAyCf,EAAeQ,MAM/CW,EAAuC,IAAIxB,OAAOC,KAAKC,kBAAaC,EAAW,CAC1FC,sBAAuB,EACvBqB,sBAAuB,IAGZC,EAAqC,IAAI1B,OAAOC,KAAKC,kBAAaC,EAAW,CACxFC,sBAAuB,EACvBqB,sBAAuB,IAGZE,EAAsC,IAAI3B,OAAOC,KAAKC,kBAAaC,EAAW,CACzFC,sBAAuB,EACvBqB,sBAAuB,EACvBG,MAAO,a,4ICrBM,SAASC,EAAcC,GAA2B,IAAD,EACRC,YAAe,GADP,mBACvDC,EADuD,KAClCC,EADkC,KAExDC,EAASH,SAAa,MAS5B,OACE,uBAAKI,UAAU,QACb,uBAAKA,UAAU,aACb,gBAAC,IAAD,CAAMC,OAAO,OAAOC,OAAO,OAAOC,SAVxC,SAAsBC,GACpBA,EAAMC,iBACN,IAAMC,EAAWC,IAAcH,EAAMI,cAAe,CAAEC,MAAM,IACxDd,EAAMe,aAAaf,EAAMe,YAAYJ,GACnB,MAAlBP,EAAOY,SAAiBZ,EAAOY,QAAQC,SAMmBC,SAAUd,GAClE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAOe,IAAI,UAAX,UACA,gBAAC,IAAD,CAAOC,aAAa,MAAMC,OAAO,KAAKC,GAAG,SAASC,KAAK,SAASC,UAAQ,KAEzEtB,EACC,gBAAC,IAAD,KACE,gBAAC,IAAD,CACEuB,MAAM,OACNC,QAAS,WACPvB,GAAuB,IAEzBwB,KAAK,KACLC,KAAK,UANP,8BAWF,gBAAC,IAAD,KACE,gBAAC,IAAD,CACEH,MAAM,OACNC,QAAS,WACPvB,GAAuB,IAEzBwB,KAAK,KACLC,KAAK,UANP,2BAWJ,gBAAC,IAAD,CAAUC,OAAQ3B,GAChB,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAOiB,IAAI,QAAX,QACA,gBAAC,IAAD,CACEE,OAAO,KACPhB,UAAU,eACVyB,UAAW5B,EACXoB,GAAG,OACHC,KAAK,OACLC,UAAQ,EACRI,KAAK,UACL,qCACA,wCAGJ,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAOT,IAAI,UAAX,UACA,gBAAC,IAAD,CACEE,OAAO,KACPS,UAAW5B,EACXoB,GAAG,SACHnC,IAAI,IACJoC,KAAK,SACLC,UAAQ,EACRO,KAAK,OACLH,KAAK,YAGT,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAOT,IAAI,SAAX,gBACA,gBAAC,IAAD,CACEE,OAAO,KACPS,UAAW5B,EACXoB,GAAG,QACHnC,IAAI,IACJoC,KAAK,QACLQ,KAAK,MACLH,KAAK,YAGT,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAOT,IAAI,QAAX,QACO,yBAAOd,UAAU,kBAAjB,eAEP,gBAAC,IAAD,CACEgB,OAAO,KACPS,UAAW5B,EACXoB,GAAG,OACHC,KAAK,OACLK,KAAK,UAGT,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAOT,IAAI,cAAX,cACa,yBAAOd,UAAU,kBAAjB,eAEb,gBAAC,IAAD,CACEgB,OAAO,KACPS,UAAW5B,EACXoB,GAAG,aACHnC,IAAI,IACJoC,KAAK,aACLQ,KAAK,MACLH,KAAK,aAIX,gBAAC,IAAD,CAAW9B,MAAO,CAAEkC,aAAc,IAChC,gBAAC,IAAD,CAAQP,MAAM,UAAUK,SAAU9B,EAAMiC,UAAWN,KAAK,KAAKC,KAAK,UAAlE,wBChHG,SAASM,EAAiBlC,GAavC,OACE,gBAAC,IAAD,CAAKK,UAAU,cACb,gBAAC,IAAD,CAAQoB,MAAM,OAAOE,KAAK,KAAKC,KAAK,UAClC,gBAAC,IAAD,CAAOvB,UAAU,gBACf,gBAAC,IAAD,CAAO8B,OAAO,WAAWC,QAAM,EAACC,SAhBP,SAAC5B,GAChC,IAAMI,EAAgBJ,EAAMI,cACtByB,EAAQzB,EAAcyB,MACf,MAATA,GAAkC,IAAjBA,EAAMtD,SAC3BgB,EAAMuC,kBAAkBD,EAAM,IAK9BzB,EAAc2B,MAAQ,KAOoDZ,KAAK,SAD3E,wBAFJ,IAQE,gBAAC,IAAD,CAAQH,MAAM,OAAOC,QAAS1B,EAAMyC,kBAAmBd,KAAK,KAAKC,KAAK,UAAtE,oBARF,IAYE,gBAAC,IAAD,CAAQH,MAAM,OAAOC,QAAS1B,EAAM0C,oBAAqBf,KAAK,KAAKC,KAAK,UAAxE,4B,mBC9BS,SAASe,IACtB,OACE,uBAAKtC,UAAU,mCACb,gBAAC,IAAD,CAAKA,UAAU,gBAAgBuC,KAAK,cAClC,gBAAC,IAAD,KACE,gBAAC,IAAD,CAASvC,UAAU,WAAWwC,OAAK,EAACC,GAAG,KAAvC,aAIF,gBAAC,IAAD,KACE,gBAAC,IAAD,CAASzC,UAAU,WAAWyC,GAAG,gBAAjC,gBAIF,gBAAC,IAAD,KACE,gBAAC,IAAD,CAASzC,UAAU,WAAWyC,GAAG,iBAAjC,mB,YCOJC,E,4MACJC,gBAAkB,SAACC,GASjB,IAAMC,EAAc,CAClBC,UAAW,KACXC,WAAYC,WAAWJ,EAAKG,aAAe,EAC3CE,KAAML,EAAKK,KACXhC,IAAK,EACLiC,MAAO,KACPC,MAAOH,WAAWJ,EAAKO,QAAU,EACjCC,OAAQJ,WAAWJ,EAAKQ,SAAW,EACnCC,OAAQT,EAAKS,OAAOC,cACpB/B,KAAMqB,EAAKrB,MAAQ,OAGrB,EAAK5B,MAAM4D,SAASC,YAAeX,IACnC,EAAKlD,MAAM4D,SAASE,gB,EAGtBC,sBAAwB,WAEpB7F,OAAO8F,QAAQ,gFAEf,EAAKhE,MAAM4D,SAASK,gB,EAIxBC,wBAA0B,WACxB,EAAKlE,MAAM4D,SAASO,gB,EAGtBC,sBAAwB,SAACC,GACvB,EAAKrE,MAAM4D,SAASU,YAAuBD,K,uDAI3C,OACE,gCACE,gBAAC,EAAD,MACA,gBAAC,IAAD,CAAWhE,UAAU,QACnB,gBAAC,IAAD,CAAKA,UAAU,aACb,gBAAC,IAAD,KACE,gBAAC,IAAD,CACEoB,MAAO8C,KAAKvE,MAAMwE,eAAiB,YAAc,SACjD1C,SAAUyC,KAAKvE,MAAMwE,eACrB9C,QAAS6C,KAAKvE,MAAMyE,SACpBC,SAAO,EACP/C,KAAK,MALP,WASF,gBAACO,EAAD,CACEO,kBAAmB8B,KAAKR,sBACxBrB,oBAAqB6B,KAAKL,wBAC1B3B,kBAAmBgC,KAAKH,yBAG3BG,KAAKvE,MAAM2E,SACZ,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKC,GAAG,KACN,gBAAC7E,EAAD,CAAekC,UAAWsC,KAAKvE,MAAMiC,UAAWlB,YAAawD,KAAKvB,0B,GAnE/C/C,aA4EjB4E,iBAAqC,SAACC,GAAD,MAAsB,CACzE7C,UAAW6C,EAAMC,gBAAkB,KADrBF,CAEZ9B,I,+KC/EEiC,E,MAAmBC,GAAeC,KAExC,SAASC,EAAQC,GACf,OAAOC,IAAG,aAAc,CACtB,cAAuB,MAARD,GAAgBA,EAAO,EACtC,eAAwB,MAARA,GAAgBA,GAAQ,IAI5C,IAAME,EAAgB,CACpB,CACEC,SAAU,cACVC,KAAM,SAAAxF,GAAK,OAAoB,MAAfA,EAAMwC,MAAgB,MAAQxC,EAAMwC,OACpDiD,OAAQ,kDACRC,OAAQ,OACRC,gBAAiB,aAEnB,CACEJ,SAAU,SACVC,KAAM,SAAAxF,GAAK,OAAI,gBAAC,IAAD,CAAM8C,GAAE,kBAAa9C,EAAMwC,QAAUxC,EAAMwC,QAC1DkD,OAAQ,SACRC,gBAAiB,aAEnB,CACEJ,SAAU,cACVC,KAAM,SAAAxF,GAAK,OACT,uBAAKK,UAAU,cACG,MAAfL,EAAMwC,MAAgB,MAAQ9C,IAAkBjB,OAAOuB,EAAMwC,SAGlEkD,OAAQ,aACRC,gBAAiB,cAEnB,CACEJ,SAAU,gBACVC,KAAM,SAAAxF,GACJ,IAAMoF,EAAOpF,EAAM4F,SAASC,OAC5B,OACE,uBAAKxF,UAAW8E,EAAQnF,EAAMwC,QACZ,MAAf4C,EAAKS,OACF,MADH,UAEMT,EAAKS,QAAU,EAAI,IAAM,IAF/B,OAEoCnG,IAAkBjB,OAAO2G,EAAKS,QAFlE,aAGKT,EAAKU,eAAiB,EAAI,IAAM,IAHrC,OAIMjG,IAAiBpB,OAAO2G,EAAKU,eAJnC,OAQPJ,OAAQ,SACRC,gBAAiB,cAEnB,CACEJ,SAAU,SACVC,KAAM,SAAAxF,GAAK,OACT,uBAAKK,UAAU,cACI,IAAhBL,EAAMwC,MAAc,MAAQ5C,IAAgBnB,OAAOuB,EAAMwC,SAG9DkD,OAAQ,SACRC,gBAAiB,cAEnB,CACEJ,SAAU,YACVC,KAAM,SAAAxF,GAAK,OACT,uBAAKK,UAAU,cACG,MAAfL,EAAMwC,MAAgB,MAAQ9C,IAAkBjB,OAAOuB,EAAMwC,SAGlEkD,OAAQ,aACRC,gBAAiB,aACjBF,OAAQ,SAAAzF,GAAK,OACX,uBAAKK,UAAU,cACZX,IAAkBjB,OACjBuB,EAAMiD,KAAK8C,QAAO,SAACC,EAAOhF,GAAR,OAAoBgF,EAAQhF,EAAQiF,YAAW,OAKzE,CACEV,SAAU,cACVC,KAAM,SAAAxF,GAAK,OACT,uBAAKK,UAAU,cACG,MAAfL,EAAMwC,MAAgB,MAAQ9C,IAAkBjB,OAAOuB,EAAMwC,SAGlEkD,OAAQ,aACRC,gBAAiB,aACjBF,OAAQ,SAAAzF,GAAK,OACX,uBAAKK,UAAU,cACZX,IAAkBjB,OACjBuB,EAAMiD,KAAK8C,QAAO,SAACC,EAAOhF,GAAR,OAAoBgF,EAAQhF,EAAQkF,cAAa,OAK3E,CACEX,SAAU,OACVC,KAAM,SAAAxF,GAAK,OACT,uBAAKK,UAAW8E,EAAQnF,EAAMwC,QACZ,MAAfxC,EAAMwC,MACH,MADH,UAEMxC,EAAMwC,OAAS,EAAI,IAAM,IAF/B,OAEoC9C,IAAkBjB,OAAOuB,EAAMwC,UAGxEkD,OAAQ,OACRC,gBAAiB,aACjBF,OAAQ,SAAAzF,GACN,IAAMmG,EAAiBnG,EAAMiD,KAAK8C,QAAO,SAACC,EAAOhF,GAAR,OAAoBgF,EAAQhF,EAAQiF,YAAW,GACxF,OACE,uBAAK5F,UAAW8E,EAAQgB,IACrBA,GAAkB,EAAI,IAAM,GAC5BzG,IAAkBjB,OAAO0H,MAKlC,CACEZ,SAAU,cACVC,KAAM,SAAAxF,GAAK,OACT,uBAAKK,UAAW8E,EAAQnF,EAAMwC,QACZ,MAAfxC,EAAMwC,MACH,MADH,UAEMxC,EAAMwC,OAAS,EAAI,IAAM,IAF/B,OAEoC3C,IAAiBpB,OAAOuB,EAAMwC,UAGvEkD,OAAQ,SACRC,gBAAiB,aACjBF,OAAQ,SAAAzF,GACN,IAAMmG,EAAiBnG,EAAMiD,KAAK8C,QAAO,SAACC,EAAOhF,GAAR,OAAoBgF,EAAQhF,EAAQiF,YAAW,GAClFG,EAAmBpG,EAAMiD,KAAK8C,QAClC,SAACC,EAAOhF,GAAR,OAAoBgF,EAAQhF,EAAQkF,cACpC,GAEIG,EACiB,IAArBD,EAAyB,GAAKA,EAAmBD,GAAkBA,EACrE,OACE,uBAAK9F,UAAW8E,EAAQkB,IACrBF,GAAkB,EAAI,IAAM,GAC5BtG,IAAiBpB,OAAO4H,MAKjC,CACEd,SAAU,WACVC,KAAM,SAAAxF,GAAK,OACT,uBAAKK,UAAW8E,EAAQnF,EAAMwC,QACZ,MAAfxC,EAAMwC,MACH,MADH,UAEMxC,EAAMwC,OAAS,EAAI,IAAM,IAF/B,OAEoC9C,IAAkBjB,OAAOuB,EAAMwC,UAGxEiD,OAAQ,SAAAzF,GACN,IAAMsG,EAAgBtG,EAAMiD,KAAK8C,QAAO,SAACC,EAAOhF,GAAR,OAAoBgF,EAAQhF,EAAQuF,WAAU,GACtF,OACE,uBAAKlG,UAAW8E,EAAQmB,IACrBA,GAAiB,EAAI,IAAM,GAC3B5G,IAAkBjB,OAAO6H,KAIhCZ,OAAQ,aACRC,gBAAiB,eAIfa,E,kDAgBJ,WAAYxG,GAAe,IAAD,8BACxB,cAAMA,IAQRyG,4BAA8B,WAC5B,EAAKzG,MAAM4D,SAAS8C,YAAcC,MAAMC,KAAK,EAAK9B,MAAM+B,oBAVhC,EAa1BC,qBAAuB,SAACC,GACtB,EAAK/G,MAAM4D,SAASoD,YAAeD,KAdX,EAiB1BE,uBAAyB,SAACC,GACpB,EAAKC,uBACP,EAAKC,SAAS,CAAEP,gBAAiB,IAAIQ,MAErC,EAAKD,SAAS,CACZP,gBAAiB,IAAIQ,IAAI,EAAKrH,MAAMsH,YAtBhB,EA2B1BC,2BAA6B,SAAC7D,GACxB,EAAK8D,iBAAiB9D,GACxB,EAAKoB,MAAM+B,gBAAgBY,OAAO/D,GAElC,EAAKoB,MAAM+B,gBAAgBa,IAAIhE,GAEjC,EAAKiE,eAjCmB,EAoC1BR,qBAAuB,WACrB,OAAO,EAAKrC,MAAM+B,gBAAgBlF,OAAS,EAAK3B,MAAMsH,QAAQtI,QArCtC,EAwC1BwI,iBAAmB,SAAC9D,GAClB,OAAO,EAAKoB,MAAM+B,gBAAgBe,IAAIlE,IAvCtC,EAAKoB,MAAQ,CAGX+B,gBAAiB,IAAIQ,KALC,E,0EAfMQ,EAAkBC,GAGhD,IAHkE,EAG9DC,GAAa,EACXC,EAAc,IAAIX,IAAIQ,EAAUP,SAChCW,EAAsB,IAAIZ,IALkC,cAM7CS,EAAUjB,iBANmC,IAMlE,2BAAgD,CAAC,IAAtCnD,EAAqC,QAC1CsE,EAAYJ,IAAIlE,GAASuE,EAAoBP,IAAIhE,GAChDqE,GAAa,GAR8C,8BAWlE,OAAIA,EAAmB,CAAElB,gBAAiBoB,GAC9B,S,8CA+CJ,IAAD,OACDC,EAAY3D,KAAKvE,MAAMsH,QAAQa,KAAI,SAAAzE,GACvC,IAAM0E,EAAQ,EAAKpI,MAAMqI,OAAO3E,GAC1B4E,EAAe,EAAKtI,MAAMsI,aAAaC,QAC3C,SAAArF,GAAW,OAAIA,EAAYQ,SAAWA,KAGpCuC,EAAY,EACZC,EAAc,EACdsC,EAAc,EAClBF,EAAaG,SAAQ,SAAAvF,GAEM,QAArBA,EAAYtB,OAEhBqE,GAAa/C,EAAYM,MAAQN,EAAYO,OAC7CwC,GAAa/C,EAAYE,WACzBoF,GAAetF,EAAYO,OACd,MAAT2E,IAAelC,GAAekC,EAAMM,YAAcxF,EAAYO,YAGpE,IAAMkF,EAAOzC,EAAcD,EACvB2C,EAAc,EACL,MAATR,IAAeQ,EAAcD,EAAO1C,GAIxC,IAAM4C,EAAcL,EAAc,GAAc,MAATJ,EACvC,MAAO,CACLvC,OAAQ,CACNA,OAAiB,MAATuC,EAAgB,KAAOA,EAAMvC,OACrCC,cAAwB,MAATsC,EAAgB,KAAOA,EAAMtC,eAE9CgD,YAAsB,MAATV,EAAgB,KAAOA,EAAMU,YAC1C7C,UAAW4C,EAAc5C,EAAY,KACrCM,SAAmB,MAAT6B,GAAiC,IAAhBI,EAAoB,KAAOJ,EAAMvC,OAAS2C,EACrEG,KAAME,EAAcF,EAAO,KAC3BC,YAAaC,EAAcD,EAAc,KACzCF,YAAsB,MAATN,EAAgB,KAAOA,EAAMM,YAC1CxC,YAAa2C,EAAc3C,EAAc,KACzCzC,OAAQ+E,EACR9E,aAIEc,EAA+C,IAA9BD,KAAKvE,MAAMsH,QAAQtI,QAAoD,IAApCuF,KAAKO,MAAM+B,gBAAgBlF,KACrF,OACE,gBAAC,IAAD,CACE6C,eAAgBA,EAChBC,SAAUF,KAAKkC,6BACf,gBAAC,IAAD,CAAKpG,UAAU,QACb,gBAAC,IAAD,KACE,gBAAC2E,EAAD,CACE+D,QAASzD,EACTrC,KAAMiF,EACNc,cAAe,CAAC,CAAEC,MAAM,EAAO3H,GAAI,WACnC4H,mBAAoB,iBAAO,CACzBC,cAAe,SAAAnJ,GAAK,OAAI,gBAAC,IAAD,eAAQK,UAAU,SAASqE,SAAO,GAAK1E,KAC/DoJ,kBAAmB,SAAApJ,GAAK,OAAI,gBAAC,IAAD,eAAQK,UAAU,SAASqE,SAAO,GAAK1E,KACnEK,UAAW,OACXgJ,cAAc,IAEhBnC,WAAY3C,KAAKiD,iBACjB8B,SAAS,SACTC,WAAW,gDACXC,iBAAkBjF,KAAKuC,qBACvB2C,SAAUlF,KAAKvE,MAAM0J,YAAYD,SACjCE,UAAWpF,KAAK4C,uBAChByC,WAAW,WACXC,UAAWtF,KAAK0C,uBAChB6C,gBAAiBvF,KAAKgD,oC,GAjIVtH,aA0IV4E,uBAA+B,SAAAC,GAAK,MAAK,CACvD4E,YAAa5E,EAAM4E,YACnBrB,OAAQvD,EAAMuD,OACdf,QAASxC,EAAMwC,QACfgB,aAAcxD,EAAMwD,gBAJNzD,CAKZ2B","file":"static/js/6.285e2a9e.chunk.js","sourcesContent":["/* @flow */\n\nconst bigNumberFormatter = new window.Intl.NumberFormat(undefined, { maximumFractionDigits: 2 });\nconst POWER_SUFFIXES = ['', 'K', 'M', 'B', 'T'];\nexport const abbreviatedNumberFormatter = {\n  format(num: number, fixed?: number): string {\n    if (num === null || num === 0) return '0'; // terminate early\n\n    fixed = !fixed || fixed < 0 ? 0 : fixed; // number of decimal places to show\n    const b = num.toPrecision(2).split('e'); // get power\n    const k = b.length === 1 ? 0 : Math.floor(Math.min(parseInt(b[1].slice(1), 10), 14) / 3); // floor at decimals, ceiling at trillions\n    const d = k < 0 ? k : Math.abs(k); // enforce -0 is 0\n    const c = d < 1 ? num.toFixed(0 + fixed) : (num / Math.pow(10, k * 3)).toFixed(1 + fixed); // divide by power\n    return `${bigNumberFormatter.format(c)}${POWER_SUFFIXES[k]}`; // append power\n  },\n};\n\n// Don't use style `currency` because it always prints a currency symbol. Match Google Finance\n// exactly (until supporting other currencies) and don't print the symbol.\nexport const currencyFormatter: Intl$NumberFormat = new window.Intl.NumberFormat(undefined, {\n  maximumFractionDigits: 2,\n  minimumFractionDigits: 2,\n});\n\nexport const numberFormatter: Intl$NumberFormat = new window.Intl.NumberFormat(undefined, {\n  maximumFractionDigits: 3,\n  minimumFractionDigits: 3,\n});\n\nexport const percentFormatter: Intl$NumberFormat = new window.Intl.NumberFormat(undefined, {\n  maximumFractionDigits: 2,\n  minimumFractionDigits: 2,\n  style: 'percent',\n});\n","/* @flow */\n\nimport * as React from 'react';\nimport { Button, Collapse, Form, FormGroup, Input, Label } from 'reactstrap';\nimport formSerialize from 'form-serialize';\n\ntype Props = {\n  isLoading: boolean,\n  onAddSymbol?: (formData: Object) => void,\n};\n\nexport default function AddSymbolForm(props: Props): React.Node {\n  const [showTransactionData, setShowTransactionData] = React.useState(false);\n  const formEl = React.useRef(null);\n\n  function handleSubmit(event: SyntheticEvent<HTMLFormElement>) {\n    event.preventDefault();\n    const formData = formSerialize(event.currentTarget, { hash: true });\n    if (props.onAddSymbol) props.onAddSymbol(formData);\n    if (formEl.current != null) formEl.current.reset();\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <Form action=\"/api\" method=\"post\" onSubmit={handleSubmit} innerRef={formEl}>\n          <FormGroup>\n            <Label for=\"symbol\">Symbol</Label>\n            <Input autoComplete=\"off\" bsSize=\"sm\" id=\"symbol\" name=\"symbol\" required />\n          </FormGroup>\n          {showTransactionData ? (\n            <FormGroup>\n              <Button\n                color=\"link\"\n                onClick={() => {\n                  setShowTransactionData(false);\n                }}\n                size=\"sm\"\n                type=\"button\">\n                - Remove transaction data\n              </Button>\n            </FormGroup>\n          ) : (\n            <FormGroup>\n              <Button\n                color=\"link\"\n                onClick={() => {\n                  setShowTransactionData(true);\n                }}\n                size=\"sm\"\n                type=\"button\">\n                + Add transaction data\n              </Button>\n            </FormGroup>\n          )}\n          <Collapse isOpen={showTransactionData}>\n            <FormGroup>\n              <Label for=\"type\">Type</Label>\n              <Input\n                bsSize=\"sm\"\n                className=\"form-control\"\n                disabled={!showTransactionData}\n                id=\"type\"\n                name=\"type\"\n                required\n                type=\"select\">\n                <option>Buy</option>\n                <option>Sell</option>\n              </Input>\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"shares\">Shares</Label>\n              <Input\n                bsSize=\"sm\"\n                disabled={!showTransactionData}\n                id=\"shares\"\n                min=\"0\"\n                name=\"shares\"\n                required\n                step=\".001\"\n                type=\"number\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"price\">Price/Amount</Label>\n              <Input\n                bsSize=\"sm\"\n                disabled={!showTransactionData}\n                id=\"price\"\n                min=\"0\"\n                name=\"price\"\n                step=\".01\"\n                type=\"number\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"date\">\n                Date <small className=\"text-secondary\">(Optional)</small>\n              </Label>\n              <Input\n                bsSize=\"sm\"\n                disabled={!showTransactionData}\n                id=\"date\"\n                name=\"date\"\n                type=\"date\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"commission\">\n                Commission <small className=\"text-secondary\">(Optional)</small>\n              </Label>\n              <Input\n                bsSize=\"sm\"\n                disabled={!showTransactionData}\n                id=\"commission\"\n                min=\"0\"\n                name=\"commission\"\n                step=\".01\"\n                type=\"number\"\n              />\n            </FormGroup>\n          </Collapse>\n          <FormGroup style={{ marginBottom: 0 }}>\n            <Button color=\"primary\" disabled={props.isLoading} size=\"sm\" type=\"submit\">\n              Add to portfolio\n            </Button>\n          </FormGroup>\n        </Form>\n      </div>\n    </div>\n  );\n}\n","/* @flow */\n\nimport * as React from 'react';\nimport { Button, Col, Input, Label } from 'reactstrap';\n\ntype Props = {\n  onDeletePortfolio: () => void,\n  onDownloadPortfolio: () => void,\n  onImportPortfolio: (file: Blob) => void,\n};\n\nexport default function PortfolioActions(props: Props): React.Node {\n  const handleImportTransactions = (event: SyntheticEvent<HTMLInputElement>) => {\n    const currentTarget = event.currentTarget;\n    const files = currentTarget.files;\n    if (files == null || files.length === 0) return;\n    props.onImportPortfolio(files[0]);\n\n    // Reset the input so the same file can be uploaded multiple times in a row (without\n    // resetting the `onchange` would not fire). Why upload multiple times? Testing testing\n    // testing. ABT: Always Be Testing.\n    currentTarget.value = '';\n  };\n\n  return (\n    <Col className=\"text-right\">\n      <Button color=\"link\" size=\"sm\" type=\"button\">\n        <Label className=\"label-button\">\n          <Input accept=\"text/csv\" hidden onChange={handleImportTransactions} type=\"file\" />\n          Import transactions\n        </Label>\n      </Button>\n      |\n      <Button color=\"link\" onClick={props.onDeletePortfolio} size=\"sm\" type=\"button\">\n        Delete portfolio\n      </Button>\n      |\n      <Button color=\"link\" onClick={props.onDownloadPortfolio} size=\"sm\" type=\"button\">\n        Download to spreadsheet\n      </Button>\n    </Col>\n  );\n}\n","/* @flow */\n\nimport './PortfolioNav.css';\nimport * as React from 'react';\nimport { Nav, NavItem } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\n\nexport default function PortfolioNav(): React.Node {\n  return (\n    <div className=\"bg-light shadow-sm nav-scroller\">\n      <Nav className=\"nav-portfolio\" role=\"navigation\">\n        <NavItem>\n          <NavLink className=\"nav-link\" exact to=\"/\">\n            Overview\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink className=\"nav-link\" to=\"/performance\">\n            Performance\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink className=\"nav-link\" to=\"/transactions\">\n            Transactions\n          </NavLink>\n        </NavItem>\n      </Nav>\n    </div>\n  );\n}\n","/* @flow */\n\nimport * as React from 'react';\nimport type { AppState, Dispatch } from './types';\nimport { Button, Col, Container, Row } from 'reactstrap';\nimport {\n  addTransaction,\n  deletePortfolio,\n  downloadPortfolio,\n  fetchAllQuotes,\n  importTransactionsFile,\n} from './actions';\nimport AddSymbolForm from './AddSymbolForm';\nimport PortfolioActions from './PortfolioActions';\nimport PortfolioNav from './PortfolioNav';\nimport { connect } from 'react-redux';\n\ntype OwnProps = {\n  children?: React.Node,\n  deleteDisabled: boolean,\n  onDelete: () => void,\n};\n\ntype StateProps = {\n  isLoading: boolean,\n};\n\ntype Props = OwnProps & StateProps & { dispatch: Dispatch };\n\nclass PortfolioContainer extends React.Component<Props> {\n  handleAddSymbol = (data: {\n    commission: string,\n    date: string,\n    price: string,\n    shares: string,\n    symbol: string,\n    type: 'Buy' | 'Sell',\n  }) => {\n    // Set some defaults and override the symbol to make sure it's always UPPERCASE.\n    const transaction = {\n      cashValue: null,\n      commission: parseFloat(data.commission) || 0,\n      date: data.date,\n      id: -1, // A real ID is added in the reducer.\n      notes: null,\n      price: parseFloat(data.price) || 0,\n      shares: parseFloat(data.shares) || 0,\n      symbol: data.symbol.toUpperCase(),\n      type: data.type || 'Buy', // Match the behavior of Google Finance; 0 value is a 'Buy'.\n    };\n\n    this.props.dispatch(addTransaction(transaction));\n    this.props.dispatch(fetchAllQuotes());\n  };\n\n  handleDeletePortfolio = () => {\n    if (\n      window.confirm('Are you sure you want to delete the entire portfolio? This is irreversible.')\n    ) {\n      this.props.dispatch(deletePortfolio());\n    }\n  };\n\n  handleDownloadPortfolio = () => {\n    this.props.dispatch(downloadPortfolio());\n  };\n\n  handleImportPortfolio = (file: Blob) => {\n    this.props.dispatch(importTransactionsFile(file));\n  };\n\n  render() {\n    return (\n      <>\n        <PortfolioNav />\n        <Container className=\"mb-4\">\n          <Row className=\"mb-3 mt-3\">\n            <Col>\n              <Button\n                color={this.props.deleteDisabled ? 'secondary' : 'danger'}\n                disabled={this.props.deleteDisabled}\n                onClick={this.props.onDelete}\n                outline\n                size=\"sm\">\n                Delete\n              </Button>\n            </Col>\n            <PortfolioActions\n              onDeletePortfolio={this.handleDeletePortfolio}\n              onDownloadPortfolio={this.handleDownloadPortfolio}\n              onImportPortfolio={this.handleImportPortfolio}\n            />\n          </Row>\n          {this.props.children}\n          <Row>\n            <Col md=\"6\">\n              <AddSymbolForm isLoading={this.props.isLoading} onAddSymbol={this.handleAddSymbol} />\n            </Col>\n          </Row>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default (connect<Props, OwnProps, _, _, _, _>((state: AppState) => ({\n  isLoading: state.isFetchingCount > 0,\n}))(PortfolioContainer): React.ComponentType<*>);\n","/* @flow */\n\nimport * as React from 'react';\nimport { Button, Col, Row } from 'reactstrap';\nimport type { AppSettings, Dispatch, Quote, Transaction } from './types';\nimport { changePageSize, deleteSymbols } from './actions';\nimport { currencyFormatter, numberFormatter, percentFormatter } from './formatters';\nimport { Link } from 'react-router-dom';\nimport PortfolioContainer from './PortfolioContainer';\nimport ReactTable from 'react-table';\nimport { connect } from 'react-redux';\nimport cx from 'classnames';\nimport selectTableHOC from 'react-table/lib/hoc/selectTable';\n\ntype StateProps = {\n  appSettings: AppSettings,\n  dispatch: Dispatch,\n  quotes: { [symbol: string]: Quote },\n  symbols: Array<string>,\n  transactions: Array<Transaction>,\n};\n\ntype Props = StateProps;\n\ntype State = {\n  selectedSymbols: Set<string>,\n};\n\nconst SelectReactTable = selectTableHOC(ReactTable);\n\nfunction classes(cell) {\n  return cx('text-right', {\n    'text-danger': cell != null && cell < 0,\n    'text-success': cell != null && cell >= 0,\n  });\n}\n\nconst TABLE_COLUMNS = [\n  {\n    accessor: 'companyName',\n    Cell: props => (props.value == null ? '...' : props.value),\n    Footer: <strong>Portfolio value:</strong>,\n    Header: 'Name',\n    headerClassName: 'text-left',\n  },\n  {\n    accessor: 'symbol',\n    Cell: props => <Link to={`/stocks/${props.value}`}>{props.value}</Link>,\n    Header: 'Symbol',\n    headerClassName: 'text-left',\n  },\n  {\n    accessor: 'latestPrice',\n    Cell: props => (\n      <div className=\"text-right\">\n        {props.value == null ? '...' : currencyFormatter.format(props.value)}\n      </div>\n    ),\n    Header: 'Last Price',\n    headerClassName: 'text-right',\n  },\n  {\n    accessor: 'change.change',\n    Cell: props => {\n      const cell = props.original.change;\n      return (\n        <div className={classes(props.value)}>\n          {cell.change == null\n            ? '...'\n            : `${cell.change >= 0 ? '+' : ''}${currencyFormatter.format(cell.change)} (${\n                cell.changePercent >= 0 ? '+' : ''\n              }${percentFormatter.format(cell.changePercent)})`}\n        </div>\n      );\n    },\n    Header: 'Change',\n    headerClassName: 'text-right',\n  },\n  {\n    accessor: 'shares',\n    Cell: props => (\n      <div className=\"text-right\">\n        {props.value === 0 ? '...' : numberFormatter.format(props.value)}\n      </div>\n    ),\n    Header: 'Shares',\n    headerClassName: 'text-right',\n  },\n  {\n    accessor: 'costBasis',\n    Cell: props => (\n      <div className=\"text-right\">\n        {props.value == null ? '...' : currencyFormatter.format(props.value)}\n      </div>\n    ),\n    Header: 'Cost Basis',\n    headerClassName: 'text-right',\n    Footer: props => (\n      <div className=\"text-right\">\n        {currencyFormatter.format(\n          props.data.reduce((total, current) => total + current.costBasis, 0)\n        )}\n      </div>\n    ),\n  },\n  {\n    accessor: 'marketValue',\n    Cell: props => (\n      <div className=\"text-right\">\n        {props.value == null ? '...' : currencyFormatter.format(props.value)}\n      </div>\n    ),\n    Header: 'Mkt. Value',\n    headerClassName: 'text-right',\n    Footer: props => (\n      <div className=\"text-right\">\n        {currencyFormatter.format(\n          props.data.reduce((total, current) => total + current.marketValue, 0)\n        )}\n      </div>\n    ),\n  },\n  {\n    accessor: 'gain',\n    Cell: props => (\n      <div className={classes(props.value)}>\n        {props.value == null\n          ? '...'\n          : `${props.value >= 0 ? '+' : ''}${currencyFormatter.format(props.value)}`}\n      </div>\n    ),\n    Header: 'Gain',\n    headerClassName: 'text-right',\n    Footer: props => {\n      const totalCostBasis = props.data.reduce((total, current) => total + current.costBasis, 0);\n      return (\n        <div className={classes(totalCostBasis)}>\n          {totalCostBasis >= 0 ? '+' : ''}\n          {currencyFormatter.format(totalCostBasis)}\n        </div>\n      );\n    },\n  },\n  {\n    accessor: 'gainPercent',\n    Cell: props => (\n      <div className={classes(props.value)}>\n        {props.value == null\n          ? '...'\n          : `${props.value >= 0 ? '+' : ''}${percentFormatter.format(props.value)}`}\n      </div>\n    ),\n    Header: 'Gain %',\n    headerClassName: 'text-right',\n    Footer: props => {\n      const totalCostBasis = props.data.reduce((total, current) => total + current.costBasis, 0);\n      const totalMarketValue = props.data.reduce(\n        (total, current) => total + current.marketValue,\n        0\n      );\n      const totalGainPercent =\n        totalMarketValue === 0 ? 0 : (totalMarketValue - totalCostBasis) / totalCostBasis;\n      return (\n        <div className={classes(totalGainPercent)}>\n          {totalCostBasis >= 0 ? '+' : ''}\n          {percentFormatter.format(totalGainPercent)}\n        </div>\n      );\n    },\n  },\n  {\n    accessor: 'daysGain',\n    Cell: props => (\n      <div className={classes(props.value)}>\n        {props.value == null\n          ? '...'\n          : `${props.value >= 0 ? '+' : ''}${currencyFormatter.format(props.value)}`}\n      </div>\n    ),\n    Footer: props => {\n      const totalDaysGain = props.data.reduce((total, current) => total + current.daysGain, 0);\n      return (\n        <div className={classes(totalDaysGain)}>\n          {totalDaysGain >= 0 ? '+' : ''}\n          {currencyFormatter.format(totalDaysGain)}\n        </div>\n      );\n    },\n    Header: \"Day's gain\",\n    headerClassName: 'text-right',\n  },\n];\n\nclass Performance extends React.Component<Props, State> {\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    // If any currently selected symbols are not in the next props update, remove them from the\n    // internal selected symbols `Set` to stay up-to-date.\n    let hasChanges = false;\n    const nextSymbols = new Set(nextProps.symbols);\n    const nextSelectedSymbols = new Set<string>();\n    for (const symbol of prevState.selectedSymbols) {\n      if (nextSymbols.has(symbol)) nextSelectedSymbols.add(symbol);\n      else hasChanges = true;\n    }\n\n    if (hasChanges) return { selectedSymbols: nextSelectedSymbols };\n    else return null;\n  }\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      // This is *not* treated as immutable. Object identity will not always correctly indicate\n      // when changes are made.\n      selectedSymbols: new Set(),\n    };\n  }\n\n  handleDeleteSelectedSymbols = () => {\n    this.props.dispatch(deleteSymbols(Array.from(this.state.selectedSymbols)));\n  };\n\n  handlePageSizeChange = (nextPageSize: number) => {\n    this.props.dispatch(changePageSize(nextPageSize));\n  };\n\n  handleToggleAllSymbols = (isSelected: boolean) => {\n    if (this.isAllSymbolsSelected()) {\n      this.setState({ selectedSymbols: new Set() });\n    } else {\n      this.setState({\n        selectedSymbols: new Set(this.props.symbols),\n      });\n    }\n  };\n\n  handleToggleSymbolSelected = (symbol: string) => {\n    if (this.isSymbolSelected(symbol)) {\n      this.state.selectedSymbols.delete(symbol);\n    } else {\n      this.state.selectedSymbols.add(symbol);\n    }\n    this.forceUpdate();\n  };\n\n  isAllSymbolsSelected = () => {\n    return this.state.selectedSymbols.size === this.props.symbols.length;\n  };\n\n  isSymbolSelected = (symbol: string) => {\n    return this.state.selectedSymbols.has(symbol);\n  };\n\n  render() {\n    const tableData = this.props.symbols.map(symbol => {\n      const quote = this.props.quotes[symbol];\n      const transactions = this.props.transactions.filter(\n        transaction => transaction.symbol === symbol\n      );\n\n      let costBasis = 0;\n      let marketValue = 0;\n      let totalShares = 0;\n      transactions.forEach(transaction => {\n        // Only summing 'Buy' transactions.\n        if (transaction.type !== 'Buy') return;\n\n        costBasis += transaction.price * transaction.shares;\n        costBasis += transaction.commission;\n        totalShares += transaction.shares;\n        if (quote != null) marketValue += quote.latestPrice * transaction.shares;\n      });\n\n      const gain = marketValue - costBasis;\n      let gainPercent = 0;\n      if (quote != null) gainPercent = gain / costBasis;\n\n      // Show returns only if the user owns shares and the quote has been returned from the API call.\n      // Showing any earlier will look like some erroneous and funky data.\n      const showReturns = totalShares > 0 && quote != null;\n      return {\n        change: {\n          change: quote == null ? null : quote.change,\n          changePercent: quote == null ? null : quote.changePercent,\n        },\n        companyName: quote == null ? null : quote.companyName,\n        costBasis: showReturns ? costBasis : null,\n        daysGain: quote == null || totalShares === 0 ? null : quote.change * totalShares,\n        gain: showReturns ? gain : null,\n        gainPercent: showReturns ? gainPercent : null,\n        latestPrice: quote == null ? null : quote.latestPrice,\n        marketValue: showReturns ? marketValue : null,\n        shares: totalShares,\n        symbol,\n      };\n    });\n\n    const deleteDisabled = this.props.symbols.length === 0 || this.state.selectedSymbols.size === 0;\n    return (\n      <PortfolioContainer\n        deleteDisabled={deleteDisabled}\n        onDelete={this.handleDeleteSelectedSymbols}>\n        <Row className=\"mb-4\">\n          <Col>\n            <SelectReactTable\n              columns={TABLE_COLUMNS}\n              data={tableData}\n              defaultSorted={[{ desc: false, id: 'symbol' }]}\n              getPaginationProps={() => ({\n                NextComponent: props => <Button className=\"btn-sm\" outline {...props} />,\n                PreviousComponent: props => <Button className=\"btn-sm\" outline {...props} />,\n                className: 'pt-2',\n                showPageJump: false,\n              })}\n              isSelected={this.isSymbolSelected}\n              keyField=\"symbol\"\n              noDataText=\"No symbols yet. Add one using the form below.\"\n              onPageSizeChange={this.handlePageSizeChange}\n              pageSize={this.props.appSettings.pageSize}\n              selectAll={this.isAllSymbolsSelected()}\n              selectType=\"checkbox\"\n              toggleAll={this.handleToggleAllSymbols}\n              toggleSelection={this.handleToggleSymbolSelected}\n            />\n          </Col>\n        </Row>\n      </PortfolioContainer>\n    );\n  }\n}\n\nexport default (connect<Props, {}, _, _, _, _>(state => ({\n  appSettings: state.appSettings,\n  quotes: state.quotes,\n  symbols: state.symbols,\n  transactions: state.transactions,\n}))(Performance): React.ComponentType<*>);\n"],"sourceRoot":""}